package exprs;

import calculator.ast.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;


class ExprParser;
   
// Parser code to change the way the parser reports errors (include
// line and column number of the error). 
parser code {:
    
    public static class ParserError extends RuntimeException {
        private int line;
        private int column;

        public ParserError(String message, int line, int column) {
            super(message);
            this.line = line;
            this.column = column;
        }


        public int getLine() {
            return line;
        }

        public int getColumn() {
            return column;
        }

        @Override
        public String toString() {
            return "Parser error in line " + line + ":" + column + ": " + getMessage();
        }
    }

    private Consumer<ParserError> onError;

    public void onError(Consumer<ParserError> onError) {
        this.onError = onError;
    }
    

    @Override
    public void syntax_error(Symbol info) {

        List<Integer> expectedTokens = expected_token_ids();
        
        int line, column;
        StringBuilder message = new StringBuilder("Unexpected token ");
        if (info instanceof ComplexSymbol) {
            ComplexSymbol s = (ComplexSymbol) info;
            line = s.getLeft().getLine();
            column = s.getLeft().getColumn();
            
            message.append(s.getName());
            
            if (s.value != null) {
                message.append("(");
                message.append(s.value);
                message.append(")");
            }
        } else {
            line = cur_token.left;
            column = cur_token.right;
        }
        
        if (!expectedTokens.isEmpty()) {
            message.append(", expected one of the following: ");
            boolean first = true;
            for (int expected : expectedTokens){
                if (!first) {
                    message.append(", ");
                }
                message.append(symbl_name_from_id(expected));
                first = false;
            }
        }
        
        
        ParserError err = new ParserError(message.toString(), line, column);
        if (onError == null) {
            System.err.println(err);
        } else {
            onError.accept(err);
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
    
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
//Terminals (tokens returned by the scanner).  
terminal           PLUS, MINUS, TIMES, DIV, EQUALS, LESS, IF, THEN, ELSE, LET, EQ, IN, FUN
                    , ARROW, LPAREN, RPAREN, INVALID_TOKEN;
terminal String   NUMBER, ID;
   
// Non terminals used in the grammar section.

non terminal Expr   expr;
non terminal Funct   funct;
non terminal Comp   comp;
non terminal CExpr  cexpr;
non terminal Term   term;
non terminal AExpr  aexpr;


/* ----------------------------Grammar Section-------------------- */
expr ::=

    IF expr:l THEN expr:m ELSE expr:r
                      	{: RESULT = new ExprIf(l,m,r); :}
  | FUN ID:n ARROW expr:r
                        {: RESULT = new ExprFun(new ExprID(n),r); :}
  | LET ID:n EQ expr:l IN expr:r
                    	{: RESULT = new ExprLet(new ExprID(n),l, r); :}
  | comp:c
        {: RESULT = c ; :}
;


comp ::=
        comp:c EQUALS cexpr:e
    		{: RESULT = new ExprEquals(c, e); :}
      | comp:c LESS cexpr:e
            {: RESULT = new ExprLess(c, e); :}
      | cexpr:c
            {: RESULT = c ; :}
;

cexpr ::=
    cexpr:e PLUS term:t
		{: RESULT = new ExprPLUS(e, t); :}
  | cexpr:e MINUS term:t
        {: RESULT = new ExprMinus(e, t); :}
  |term:t
        {: RESULT = t ; :}
  ;

term ::=

    term:t TIMES funct:f
    	{: RESULT = new ExprMUL(t, f); :}
  | term:t DIV funct:f
        {: RESULT = new ExprDiv(t, f); :}
  |funct:f
         {: RESULT = f ; :}
  ;

  funct ::=
         funct:f aexpr:a
      		{: RESULT = new ExprFunction(f,a); :}
        |aexpr:a
              {: RESULT = a ; :}

  ;

aexpr::=
    LPAREN expr:e RPAREN
            {: RESULT = new  Paren(e); :}
   | NUMBER:n
        {: RESULT = new ExprNumber(n); :}
  | ID:i
        {: RESULT = new ExprID(i); :}

  ;
