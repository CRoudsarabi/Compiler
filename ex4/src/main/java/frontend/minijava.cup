package minijava.syntax;

import minijava.ast.*;
import static minijava.ast.MJ.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import frontend.SyntaxError;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import frontend.AstHelper;

class MiniJavaParser;
   
// Parser code to change the way the parser reports errors (include
// line and column number of the error). 
parser code {:
    
    private Consumer<SyntaxError> onError;

    public void onError(Consumer<SyntaxError> onError) {
        this.onError = onError;
    }
    

    @Override
    public void syntax_error(Symbol info) {

        List<Integer> expectedTokens = expected_token_ids();
        
        int line, column;
        StringBuilder message = new StringBuilder("Unexpected token ");
        if (info instanceof ComplexSymbol) {
            ComplexSymbol s = (ComplexSymbol) info;
            line = s.getLeft().getLine();
            column = s.getLeft().getColumn();
            
            message.append(s.getName());
            
            if (s.value != null) {
                message.append("(");
                message.append(s.value);
                message.append(")");
            }
        } else {
            line = cur_token.left;
            column = cur_token.right;
        }
        
        if (!expectedTokens.isEmpty()) {
            message.append(", expected one of the following: ");
            boolean first = true;
            for (int expected : expectedTokens){
                if (!first) {
                    message.append(", ");
                }
                message.append(symbl_name_from_id(expected));
                first = false;
            }
        }
        
        
        SyntaxError err = new SyntaxError(message.toString(), line, column);
        if (onError == null) {
            System.err.println(err);
        } else {
            onError.accept(err);
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        // ignore
    }
    
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal INVALID_TOKEN;

// Java keywords:
terminal ABSTRACT,  CONTINUE,   FOR,          NEW,         SWITCH,
         ASSERT,    DEFAULT,    IF,           PACKAGE,     SYNCHRONIZED,
         BOOLEAN,   DO,         GOTO,         PRIVATE,     THIS,
         BREAK,     DOUBLE,     IMPLEMENTS,   PROTECTED,   THROW,
         BYTE,      ELSE,       IMPORT,       PUBLIC,      THROWS,
         CASE,      ENUM,       INSTANCEOF,   RETURN,      TRANSIENT,
         CATCH,     EXTENDS,    INT,          SHORT,       TRY,
         CHAR,      FINAL,      INTERFACE,    STATIC,      VOID,
         CLASS,     FINALLY,    LONG,         STRICTFP,    VOLATILE,
         CONST,     FLOAT,      NATIVE,       SUPER,       WHILE;

// additional keywords:
terminal MAIN, STRING, LENGTH, SYSTEM, OUT, PRINTLN;

// symbols:
terminal LBRACE, RBRACE, // { }
         LBRACKET, RBRACKET, // [ ]
         LRBRACKET, // [] as a single token
         LPAREN, RPAREN, // ()
         DOT, SEMI, COMMA, EQ, NEG, UMINUS, AND, PLUS, MINUS, TIMES, DIV, LESS, EQUALS;

// literals:
terminal TRUE, FALSE, NULL;

terminal String   NUMBER, ID;
   
// Non terminals used in the grammar section.
//WICHTIG: alle AST classen haben prefix MJ
non terminal MJProgram program;
non terminal MJMainClass mainClass;
non terminal MJClassDecl classDecl;
non terminal MJClassDeclList classDeclList;
non terminal MJExtended extended;
non terminal MJMemberDecl memberDecl;
non terminal MJVarDecl paramDecl;
non terminal MJVarDeclList paramList, commaSeparatedParamList, nonEmptyParamList;
non terminal MJStatement stmt, blockStatement;
non terminal MJBlock block;
non terminal MJType type, intBracket, boolBracket;
non terminal Integer classBracket;
non terminal MJBaseType baseType;
non terminal MJExpr expr, expr2;
non terminal MJExprL exprL;
non terminal MJExprList exprList, commaSeparatedExprList, nonEmptyExprList;
//non terminal MJTypeArray bracket;
non terminal List<MJMemberDecl> memberDeclList;
non terminal List<MJStatement> blockStatementList;
precedence left AND;
precedence left EQUALS;
precedence left LESS;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left NEG,UMINUS;
precedence left DOT, LBRACKET, RBRACKET, LPAREN, RPAREN;

/* ----------------------------Grammar Section-------------------- */
//.\gradlew compileJava
// array access

program ::=  mainClass:m classDeclList:cl
            {: RESULT =  Program(m,cl);  :}
;

mainClass ::= CLASS ID:name LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LRBRACKET ID:argsName RPAREN block:mainBody RBRACE
                {:  RESULT =  MainClass(name,argsName,mainBody);  :}

;

classDeclList ::= classDecl:c classDeclList:cList
                    {: cList.add(c); RESULT = cList; :}
                 | {: RESULT = ClassDeclList(); :}
;

classDecl ::= CLASS ID:name extended:e LBRACE  memberDeclList:memberList RBRACE
                {:MJVarDeclList varDeclList = MJ.VarDeclList();
                  MJMethodDeclList methodDeclList = MJ.MethodDeclList();
                  AstHelper.splitList(memberList,varDeclList,methodDeclList);
                       RESULT = ClassDecl(name,e,varDeclList,methodDeclList); :}
;
extended ::= EXTENDS ID:name
                {: RESULT = ExtendsClass(name); :}
                | {: RESULT = ExtendsNothing(); :}
;
memberDecl ::= type:returnType ID:name LPAREN paramList:formalParameters RPAREN  block:methodBody
                                {: RESULT = MethodDecl(returnType,name,formalParameters,methodBody); :}
                |type:t ID:i SEMI
                                 {: RESULT = VarDecl(t, i); :}
;
memberDeclList ::= memberDecl:m memberDeclList:mList
                    {:List<MJMemberDecl> memberList=new ArrayList<>();memberList.add(m);memberList.addAll(mList); RESULT = memberList; :}
                    |
                     {: RESULT=new ArrayList<>(); :}
;


paramList ::= paramDecl:d commaSeparatedParamList:pl
            {:  pl.add(0, d) ; RESULT =  pl; :}
            |
            {: RESULT =  VarDeclList(); :}
;
nonEmptyParamList ::= paramDecl:d commaSeparatedParamList:pl
                                 {:  pl.add(0, d); RESULT =  pl; :}
;
commaSeparatedParamList ::= COMMA nonEmptyParamList:pl
                            {: RESULT =  pl; :}
                        |
                            {:  RESULT =  VarDeclList(); :}
;
paramDecl ::= type:t ID:i
                {: RESULT = VarDecl(t, i); :}
;

block ::=  LBRACE blockStatementList:bS RBRACE
            {:RESULT = Block(bS);  :}
;
blockStatementList ::=      {: RESULT=new ArrayList<>(); :}
                        | blockStatement: b blockStatementList:bList
                            {:  ArrayList<MJStatement> bl=new ArrayList<>();
                                bl.add(b);
                                bl.addAll(bList);
                                RESULT = bl;
                        :}
;

blockStatement ::= stmt:s
                        {:RESULT=s;:}
                   | type:t ID:i SEMI
                       {: RESULT = VarDecl(t, i); :}

;
stmt ::=
            SYSTEM DOT OUT DOT PRINTLN LPAREN expr2:e RPAREN SEMI
                {: RESULT =  StmtPrint(e);  :}
            | IF LPAREN expr2:e RPAREN stmt:s1 ELSE stmt:s2
                {: RESULT =  StmtIf(e,s1,s2);  :}
            | WHILE LPAREN expr2:e RPAREN stmt:s
                {: RESULT = StmtWhile(e,s); :}
            | RETURN expr2:e SEMI
                {: RESULT = StmtReturn(e); :}
            | expr2:e SEMI
                {: RESULT =  StmtExpr(e);  :}
            | exprL:el EQ expr2:e SEMI
                {: RESULT = StmtAssign(el,e);  :}
            | block:b
                {: RESULT=b; :}


;
expr2 ::=   NEW INT LBRACKET expr2:e RBRACKET intBracket:b
            {: RESULT =  NewArray(b,e); :}
            | NEW BOOLEAN LBRACKET expr2:e RBRACKET boolBracket:b
                          {: RESULT =  NewArray(b,e); :}
            | NEW ID:name LBRACKET expr2:e RBRACKET classBracket:b
                          {:MJType temp=TypeClass(name);for(int i=0;i<b;i++){temp=TypeArray(temp);} RESULT = NewArray(temp,e);  :}
           |expr:e
            {: RESULT = e; :}
;

expr ::= expr2:e1 PLUS expr2:e2
          {: RESULT = ExprBinary(e1,Plus(), e2); :}
        |expr2:e1 MINUS expr2:e2
          {: RESULT = ExprBinary(e1,Minus(), e2); :}
        |expr2:e1 TIMES expr2:e2
           {: RESULT = ExprBinary(e1,Times(), e2); :}
        |expr2:e1 DIV expr2:e2
           {: RESULT = ExprBinary(e1,Div(), e2); :}
        |expr2:e1 LESS expr2:e2
            {: RESULT = ExprBinary(e1,Less(), e2); :}
        |expr2:e1 EQUALS expr2:e2
            {: RESULT = ExprBinary(e1,Equals(), e2); :}
        |expr2:e1 AND expr2:e2
            {: RESULT = ExprBinary(e1,And(), e2); :}
        |expr2:e DOT LENGTH
            {: RESULT =  ArrayLength(e); :}
        |expr2:receiver DOT ID:methodName LPAREN exprList:arguments RPAREN
            {: RESULT =  MethodCall(receiver,methodName,arguments); :}
        |NEW ID:className LPAREN RPAREN
            {: RESULT =  NewObject(className); :}
        |NEG expr2:e
            {: RESULT =  ExprUnary(Negate(),e); :}
        |MINUS expr2:e
            {: RESULT =  ExprUnary(UnaryMinus(),e); :}%prec UMINUS
        |NUMBER:n
            {: RESULT = Number(Integer.parseInt(n)); :}
        |TRUE
            {: RESULT = BoolConst(true ); :}
        |FALSE
            {: RESULT = BoolConst(false); :}
        |THIS
            {: RESULT = ExprThis(); :}
        |NULL
            {: RESULT = ExprNull(); :}
        |exprL:l
            {: RESULT = Read(l); :}
        |LPAREN expr2:e RPAREN
            {: RESULT = e ; :}
;
intBracket ::=
                          {: RESULT = TypeInt();  :}
                          | intBracket:b LRBRACKET
                          {: RESULT = TypeArray(b);  :}
;
boolBracket ::=
                          {: RESULT = TypeBool();  :}
                          | boolBracket:b LRBRACKET
                          {: RESULT = TypeArray(b);  :}
;
classBracket ::=
                          {: RESULT = 0;  :}
                          | classBracket:b LRBRACKET
                          {: RESULT = b + 1;  :}
;
exprList ::= expr2:e commaSeparatedExprList:el
                {:  el.add(0, e); RESULT =  el; :}
             |   {:  RESULT =  ExprList(); :}
;
nonEmptyExprList ::= expr2:e commaSeparatedExprList:el
                                 {:  el.add(0, e); RESULT =  el; :}
;
commaSeparatedExprList ::= COMMA nonEmptyExprList:e
                            {: RESULT =  e; :}
                        |
                            {:  RESULT =  ExprList(); :}
;
exprL ::= ID:i
            {: RESULT =  VarUse(i); :}
        | expr:e1 LBRACKET expr2:e2 RBRACKET
            {: RESULT =  ArrayLookup(e1,e2); :}
        | expr2:e DOT ID:i
            {: RESULT =  FieldAccess(e,i); :}
;

type ::= baseType:b
            {: RESULT = b;  :}
            | type:t LRBRACKET
            {: RESULT = TypeArray(t);  :}
;
baseType ::= INT
           {: RESULT = TypeInt(); :}
            |BOOLEAN
           {: RESULT = TypeBool(); :}
           | ID:name
            {: RESULT = TypeClass(name);  :}
;